  <html>
  <head>
  <%= include_gon(:init => true) %>
    <link rel="stylesheet" href="https://developer.api.autodesk.com/viewingservice/v1/viewers/style.css?" type="text/css">
    <script src="https://rendro.github.io/easy-pie-chart/javascripts/jquery.easy-pie-chart.js"></script>
    <script src="https://developer-stg.api.autodesk.com/modelderivative/v2/viewers/viewer3D.js?v=6.0"></script>
    <!-- <script src="https://developer.api.autodesk.com/viewingservice/v1/viewers/viewer3D.min.js?"></script> -->
    <script>
    // change the token and urn(translated file location) before you try to run
    // easiest is to go through steps on http://shiya.github.io/Intro-View-and-Data/
    var token = gon.token
    var urn = gon.urn

    $(document).ready(function () {
    if(window.location.href.indexOf("urn") > -1) {
       urn = window.location.href.substring(window.location.href.indexOf("urn")+4);
    }
    });

    function getToken() {
        return token;
    }
    function loadDocument(viewer, documentId) {
        // Find the first 3d geometry and load that.
        Autodesk.Viewing.Document.load(documentId, function(doc) {
        var geometryItems = [];
        geometryItems = Autodesk.Viewing.Document.getSubItemsWithProperties(doc.getRootItem(), {
            'type' : 'geometry',
            'role' : '3d'
        }, true);

        if (geometryItems.length > 0) {
            viewer.load(doc.getViewablePath(geometryItems[0]));
        }
     }, function(errorMsg) {// onErrorCallback
        alert("Load Error: " + errorMsg);
        });
    }

    function initialize() {
        var options = {
            'document' : 'urn:' + urn,
            'env':'AutodeskProduction',
            'getAccessToken': getToken,
            'refreshToken': getToken,
            };
        var viewerElement = document.getElementById('viewer');
        var viewer = new Autodesk.Viewing.Viewer3D(viewerElement, {});

        Autodesk.Viewing.Initializer(options,function() {
            viewer.initialize();
            loadDocument(viewer, options.document);
        });
    }

    initialize();
    </script>
</head>
<body onload="initialize();">
    <div id="nav-bar" class="navbar navbar-default app-navbar">
      <div class="container-menu">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only"><%= image_tag 'menu_image.png', alt: '', class: 'avatar dropdown-toggle hidden-md hidden-lg', id: 'navbar-urb-menu', data: {toggle: 'dropdown'} %></span>
          </button>
          <a class="navbar-brand trackit nomargin" href="/"><img width="160px;" src="../Autodesk_logo.png"/></a>
        </div>
        <div class="navbar-nav-large navbar-collapse collapse" id="navbar-user">
          <ul class="nav navbar-nav">
            <li class = "active"><%= link_to 'Home', '/'%></li>
            <% if !@user.judge %>
            <li><%= link_to 'Upload Model', '/upload'%></li>
            <% end %>
            <li><%= link_to 'View', '/view'%></li>
            <!-- <li><%#= link_to('Edit registration', edit_user_registration_path) %></li> -->
            <li><%= link_to('Logout', destroy_user_session_path, :method => :delete) %> </li>
          </ul>
        </div>
      </div>
    </div>
    <div class="container" style="max-width: 100%; margin-right: 100px; margin-left: 10px;">

    <% if @status == "works" %>


    <!-- GRAPHS -->
    <div class='' style='display: flex; justify-content: space-between; align-content: center; flex-wrap: wrap;margin-right:25px;'>
    <%#= link_to edit_planting_path(planting) do %>
     <!-- <div id=<%#="planting_#{planting.item.name.gsub(/\s+/, "").downcase}_#{planting.id}"%> class="planting_chart_circle" data-percent="0%"> -->
      <div id="metric_1" class="metric_1_class chart_circle" data-percent="40%" style="display: block">
        <div class="inventory-circle-card" style="align-items: center">
          <div>
            <div>
              <div class="item-name-info">
                <%#= "#{planting.item.name.capitalize}"%>
              </div>
            </div>
            <div class="item-name-info">
              Enclosures
            </div>
            <div class="item-name-info">
                <%#= "#{Date.parse(planting.created_at.to_s)}"%>
            </div>
          </div>
        </div>
        </div>

      <div id="metric_2" class="metric_2_class chart_circle" data-percent="0%" style="display: block">
        <div class="inventory-circle-card" style="align-items: center">
          <div>
            <div>
              <div class="item-name-info">
                <%#= "#{planting.item.name.capitalize}"%>
              </div>
            </div>
            <div class="item-name-info">
              IFC Schema
            </div>
            <div class="item-name-info">
                <%#= "#{Date.parse(planting.created_at.to_s)}"%>
            </div>
          </div>
        </div>
        </div>

      <div id="metric_3" class="metric_3_class chart_circle" data-percent="0%" style="display: block">
        <div class="inventory-circle-card" style="align-items: center">
          <div>
            <div>
              <div class="item-name-info">
                <%#= "#{planting.item.name.capitalize}"%>
              </div>
            </div>
            <div class="item-name-info">
              Materials
            </div>
            <div class="item-name-info">
                <%#= "#{Date.parse(planting.created_at.to_s)}"%>
            </div>
          </div>
        </div>
        </div>

      <div id="metric_4" class="metric_4_class chart_circle" data-percent="0%" style="display: block">
        <div class="inventory-circle-card" style="align-items: center">
          <div>
            <div>
              <div class="item-name-info">
                <%#= "#{planting.item.name.capitalize}"%>
              </div>
            </div>
            <div class="item-name-info">
              Clashes
            </div>
            <div class="item-name-info">
                <%#= "#{Date.parse(planting.created_at.to_s)}"%>
            </div>
          </div>
        </div>
        </div>

      <div id="metric_5" class="metric_5_class chart_circle" data-percent="0%" style="display: block">
        <div class="inventory-circle-card" style="align-items: center">
          <div>
            <div>
              <div class="item-name-info">
                <%#= "#{planting.item.name.capitalize}"%>
              </div>
            </div>
            <div class="item-name-info">
               Family Names
            </div>
            <div class="item-name-info">
                <%#= "#{Date.parse(planting.created_at.to_s)}"%>
            </div>
          </div>
        </div>
        </div>

        <div id="metric_6" class="metric_6_class chart_circle" data-percent="0%" style="display: block">
        <div class="inventory-circle-card" style="align-items: center">
          <div>
            <div>
              <div class="item-name-info">
                <%#= "#{planting.item.name.capitalize}"%>
              </div>
            </div>
            <div class="item-name-info">
              Other Metrics
            </div>
            <div class="item-name-info">
                <%#= "#{Date.parse(planting.created_at.to_s)}"%>
            </div>
          </div>
        </div>
        </div>

      </div>


      <script>
      $(function() {
        $('.metric_1_class').easyPieChart({
          // The color of the curcular bar. You can pass either a css valid color string like rgb, rgba hex or string colors. But you can also pass a function that accepts the current percentage as a value to return a dynamically generated color.
          barColor: '#C4D500',
          // The color of the track for the bar, false to disable rendering.
          trackColor: '#f4f4f4',
          // The color of the scale lines, false to disable rendering.
          scaleColor: '#f4f4f4',
          // Defines how the ending of the bar line looks like. Possible values are: butt, round and square.
          lineCap: 'round',
          // Width of the bar line in px.
          lineWidth: 7,
          // Size of the pie chart in px. It will always be a square.
          size: 105,
          // Time in milliseconds for a eased animation of the bar growing, or false to deactivate.
          animate: 1000,
          // Callback function that is called at the start of any animation (only if animate is not false).
          onStart: $.noop,
          // Callback function that is called at the end of any animation (only if animate is not false).
          onStop: $.noop
        });
      });

      $(function() {
        $('.metric_2_class').easyPieChart({
          // The color of the curcular bar. You can pass either a css valid color string like rgb, rgba hex or string colors. But you can also pass a function that accepts the current percentage as a value to return a dynamically generated color.
          barColor: '#C4D500',
          // The color of the track for the bar, false to disable rendering.
          trackColor: '#f4f4f4',
          // The color of the scale lines, false to disable rendering.
          scaleColor: '#f4f4f4',
          // Defines how the ending of the bar line looks like. Possible values are: butt, round and square.
          lineCap: 'round',
          // Width of the bar line in px.
          lineWidth: 7,
          // Size of the pie chart in px. It will always be a square.
          size: 105,
          // Time in milliseconds for a eased animation of the bar growing, or false to deactivate.
          animate: 1000,
          // Callback function that is called at the start of any animation (only if animate is not false).
          onStart: $.noop,
          // Callback function that is called at the end of any animation (only if animate is not false).
          onStop: $.noop
        });
      });

      $(function() {
        $('.metric_3_class').easyPieChart({
          // The color of the curcular bar. You can pass either a css valid color string like rgb, rgba hex or string colors. But you can also pass a function that accepts the current percentage as a value to return a dynamically generated color.
          barColor: '#C4D500',
          // The color of the track for the bar, false to disable rendering.
          trackColor: '#f4f4f4',
          // The color of the scale lines, false to disable rendering.
          scaleColor: '#f4f4f4',
          // Defines how the ending of the bar line looks like. Possible values are: butt, round and square.
          lineCap: 'round',
          // Width of the bar line in px.
          lineWidth: 7,
          // Size of the pie chart in px. It will always be a square.
          size: 105,
          // Time in milliseconds for a eased animation of the bar growing, or false to deactivate.
          animate: 1000,
          // Callback function that is called at the start of any animation (only if animate is not false).
          onStart: $.noop,
          // Callback function that is called at the end of any animation (only if animate is not false).
          onStop: $.noop
        });
      });

      $(function() {
        $('.metric_4_class').easyPieChart({
          // The color of the curcular bar. You can pass either a css valid color string like rgb, rgba hex or string colors. But you can also pass a function that accepts the current percentage as a value to return a dynamically generated color.
          barColor: '#C4D500',
          // The color of the track for the bar, false to disable rendering.
          trackColor: '#f4f4f4',
          // The color of the scale lines, false to disable rendering.
          scaleColor: '#f4f4f4',
          // Defines how the ending of the bar line looks like. Possible values are: butt, round and square.
          lineCap: 'round',
          // Width of the bar line in px.
          lineWidth: 7,
          // Size of the pie chart in px. It will always be a square.
          size: 105,
          // Time in milliseconds for a eased animation of the bar growing, or false to deactivate.
          animate: 1000,
          // Callback function that is called at the start of any animation (only if animate is not false).
          onStart: $.noop,
          // Callback function that is called at the end of any animation (only if animate is not false).
          onStop: $.noop
        });
      });

      $(function() {
        $('.metric_5_class').easyPieChart({
          // The color of the curcular bar. You can pass either a css valid color string like rgb, rgba hex or string colors. But you can also pass a function that accepts the current percentage as a value to return a dynamically generated color.
          barColor: '#C4D500',
          // The color of the track for the bar, false to disable rendering.
          trackColor: '#f4f4f4',
          // The color of the scale lines, false to disable rendering.
          scaleColor: '#f4f4f4',
          // Defines how the ending of the bar line looks like. Possible values are: butt, round and square.
          lineCap: 'round',
          // Width of the bar line in px.
          lineWidth: 7,
          // Size of the pie chart in px. It will always be a square.
          size: 105,
          // Time in milliseconds for a eased animation of the bar growing, or false to deactivate.
          animate: 1000,
          // Callback function that is called at the start of any animation (only if animate is not false).
          onStart: $.noop,
          // Callback function that is called at the end of any animation (only if animate is not false).
          onStop: $.noop
        });
      });

      $(function() {
        $('.metric_6_class').easyPieChart({
          // The color of the curcular bar. You can pass either a css valid color string like rgb, rgba hex or string colors. But you can also pass a function that accepts the current percentage as a value to return a dynamically generated color.
          barColor: '#C4D500',
          // The color of the track for the bar, false to disable rendering.
          trackColor: '#f4f4f4',
          // The color of the scale lines, false to disable rendering.
          scaleColor: '#f4f4f4',
          // Defines how the ending of the bar line looks like. Possible values are: butt, round and square.
          lineCap: 'round',
          // Width of the bar line in px.
          lineWidth: 7,
          // Size of the pie chart in px. It will always be a square.
          size: 105,
          // Time in milliseconds for a eased animation of the bar growing, or false to deactivate.
          animate: 1000,
          // Callback function that is called at the start of any animation (only if animate is not false).
          onStart: $.noop,
          // Callback function that is called at the end of any animation (only if animate is not false).
          onStop: $.noop
        });
      });

      let ratio_of_data_for_metric_1 = (60/100);
      let percentage_for_metric_1 = `${Math.trunc((ratio_of_data_for_metric_1  * 100))}%`

      let ratio_of_data_for_metric_2 = (100/100);
      let percentage_for_metric_2 = `${Math.trunc((ratio_of_data_for_metric_2  * 100))}%`

      let ratio_of_data_for_metric_3 = (30/100);
      let percentage_for_metric_3 = `${Math.trunc((ratio_of_data_for_metric_3  * 100))}%`

      let ratio_of_data_for_metric_4 = (90/100);
      let percentage_for_metric_4 = `${Math.trunc((ratio_of_data_for_metric_4  * 100))}%`

      let ratio_of_data_for_metric_5 = (80/100);
      let percentage_for_metric_5 = `${Math.trunc((ratio_of_data_for_metric_5  * 100))}%`

      let ratio_of_data_for_metric_6 = (95/100);
      let percentage_for_metric_6 = `${Math.trunc((ratio_of_data_for_metric_6  * 100))}%`

      document.getElementById("metric_1").setAttribute("data-percent", percentage_for_metric_1);

      document.getElementById("metric_2").setAttribute("data-percent", percentage_for_metric_2);

      document.getElementById("metric_3").setAttribute("data-percent", percentage_for_metric_3);

      document.getElementById("metric_4").setAttribute("data-percent", percentage_for_metric_4);

      document.getElementById("metric_5").setAttribute("data-percent", percentage_for_metric_5);

      document.getElementById("metric_6").setAttribute("data-percent", percentage_for_metric_6);
      </script>

      <div class="viewer_container" style="margin-left: -25px;">
            <div id="viewer" style="">
            </div>
      </div>
          </div>
        <% elsif @status == "judge" %>
            <% if @users.count == 0 %>
            <h4> Sorry, no users found! </h4>
            <% else %>
            <h4> Click on a User's name for the viewable: </h4>
            <h5>
            <% x = 1 %>
            <% @users.each do |user| %>
                <a href=<%= '/view' + '?uid=' + user.id.to_s %> style="text-decoration: none"><%= x %>. <%= user.name %></a><br>
                <% x += 1 %>
            <% end %>
            <% end %>
            </h5>
        <% elsif @status == "none" %>
            <h4> You currently have no models uploaded. Add models by going to: <a href=<%= '/upload'%> style="text-decoration: none"> Upload </a> </h4>
        <% elsif @status == "noviewable" %>
            <h4> You currently have no viewable models. Add models by going to: <a href=<%= '/upload'%> style="text-decoration: none"> Upload </a> </h4>

        <% end %>
</div>
</body>
</html>
